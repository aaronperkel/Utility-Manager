This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-19T17:36:29.939Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
css/
  custom.css
  layout-phone.css
  login.css
js/
  dropdown.js
php/
  connect-DB.php
  send_reminder.php
  sql.php
  update_ics.php
  update_owe.php
  update_status_paid.php
  update_status_unpaid.php
python/
  db.py
  new_bill.py
  run.py
  send_reminder.py
.gitignore
.temp
authenticate.php
cal.ics
footer.php
header.php
index.php
login.php
logout.php
nav.php
portal.php
README.md
register.php
top.php

================================================================
Repository Files
================================================================

================
File: css/custom.css
================
:root {
    --main-bg-color: #555555;
    --sec-bg-color: #888;
    --nav-bg-color: rgba(85, 85, 85, .8);
    --main-text-color: #111111;
    --background-odd: rgba(233, 233, 233, .8);
    --background-even: rgba(253, 253, 233, .8);
}

* {
    font-family: monospace;
    line-height: 1.3em;
    margin: 0;
    padding: 0;
}

main,
h1, h2, h3, h4, h5, h6,
nav {
    padding: 1%;
}

html {
    background-color: var(--main-bg-color);
    color: var(--main-text-color);
}

header h1, header a {
    display: inline;
}

header {
    margin-bottom: 20px;
}

body {
    width: 90%;
    margin: auto;
}

main, footer {
    background-color: var(--sec-bg-color);
}

footer {
    padding: 20px; 
    text-align: center;
}

nav {
    text-align: center;
    font-size: 14px;
    display: inline;
}

nav a {
    display: inline-block;
    padding: 3% 5% 3% 5%;
}

h1 {
    text-transform: uppercase;
}

table {
    border: medium solid black;
    border-collapse: collapse;
    margin: auto;
    width: 65%;
    text-align: center;
    margin-bottom: 2em;
    table-layout: fixed;
}

td, th {
    border: thin solid black;
    padding: .5em;
}

td:nth-child(7) {
    text-align: center;
}

tr:nth-child(odd) {
    background-color: var(--background-odd);
}

tr:nth-child(even) {
    background-color: var(--background-even);
}

a:hover {
    color: var(--main-text-color);
}

a:link, a:visited {
    color: darkblue;
    text-decoration: none;
}

nav a:hover,
header a:hover {
    background-color: var(--main-text-color);
    color: var(--main-bg-color);
    text-decoration: underline;
}

input[type=text],
input[type=number] {
    width: 80%;
    padding: 4px;
    display: inline-block;
    border: 1px solid #ccc;
    border-radius: 4px;
    text-align: center;
}

input[type=date] {
    padding: 2px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

select {
    width: 80%;
    border-radius: 4px;
    border: 1px solid #ccc;
}

input[type=submit]:not(.paidButton) {
    width: 60%;
    background-color: #999999;
    padding: 16px;
    margin: 6px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 18px;
    color: var(--main-text-color)
}

input[type=submit]:hover {
  background-color: #42b548;
  color: white;
}

.notPaid {
    color: red;
}

.notPaid input[type=text]{
    color: red;
    margin: 0;
    padding: 0;
    border: none;
    background: transparent;
    font-size: medium;
}

tr:nth-child(3n+5) {
    border-bottom: dashed 3px #555;
}

input[type="file"] {
    display: none;
}

.paid {
    color: green;
}

.zoom {
    transition: transform .2s;
}

.zoom:hover {
    transform: scale(1.2);
}

.tooltip {
    position: relative;
    display: inline-block;
    border-bottom: 1px dotted black;
}

.tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: black;
    color: #fff;
    text-align: center;
    padding: 5px 0;
    border-radius: 6px;
    position: absolute;
    z-index: 1;
    width: 120px;
    top: 140%;
    left: 50%;
    margin-left: -60px;
}

.tooltip:hover .tooltiptext {
    visibility: visible;
}

.tooltip .tooltiptext::after {
    content: " ";
    position: absolute;
    bottom: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: transparent transparent black transparent;
}

.navBox {
    display: grid;
    grid-template-columns: auto 20%;
    width: 100%;
    margin: auto;
}

.paidButton {
    width: 90%;
    background-color: #999999;
    padding: 2px;
    margin-top: 5px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    color: var(--main-text-color)
}

.radio {
    display: grid;
    grid-template-columns: auto auto;
    width: 80%;
    margin: auto;
}

.hover:hover {
    background-color: lightblue;
}

.full-width-textarea {
    width: 100%;
    padding: 4px;
    border: 1px solid #ccc;
    border-radius: 4px;
    height: 20em;
    border-radius: 5px;
    box-sizing: border-box;
    resize: none;
}

.tableNote {
    margin: auto;
    width: 65%;
}

.dropbtn {
    background-color: white;
    border: 2px solid black;
    color: #4c4c4c;
    padding: 12px;
    font-size: 14px;
    cursor: pointer;
    margin-left: 27%;
    margin-top: 2%;
}

.dropdown {
    position: relative;
    display: inline-block;
}

.dropdown-content {
    display: none;
    position: absolute;
    background-color: #fff;
    border: 1px solid lightgray;
    width: 180px;
    overflow: auto;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    z-index: 1;
    margin-left: 27%;
}

.dropdown-content a {
    color: black;
    padding: 12px 12px;
    text-decoration: none;
    display: block;
    color:#4c4c4c;
}

.dropdown a:hover {
    background-color: #ddd;
}

.show {
    display: block;
}

.custom-file-upload {
    border: 1px solid #ccc;
    display: inline-block;
    padding: 6px 12px;
    cursor: pointer;
    background-color: #999999;
    border-radius: 4px;
    color: var(--main-text-color) 
}

.custom-file-upload:hover {
    background-color: #42b548;
    color: white;
}

================
File: css/layout-phone.css
================
header {
    display: grid;
    grid-template-areas: 1fr 1fr;
    margin-top: 1em;
}

header a {
    margin: auto;
    margin-right: 0px;
    margin-top: 1em;
}

table {
    display: grid;
    grid-template-columns: 1fr;
    width: 100%;
}

thead, tbody {
    display: contents;
}

tr {
    display: grid;
    grid-template-columns: 1fr 1fr;
    margin: 1%;
    border: thin solid black;
}

td:hover {
    background-color: unset;
}

th:hover {
    background-color: var(--sec-bg-color);
}   

th, td {
    display: block;
    padding: 8px;
}

th {
    background-color: var(--sec-bg-color);
}

td:nth-child(6) div {
    all: unset;
}

tr:nth-child(3n+5) {
    border-bottom: dashed 5px #444;
}

.spanTwoMobile {
    grid-column: span 2;
}

nav {
    margin: auto;
}

.navBox {
    grid-template-columns: auto 40%;
}

================
File: css/login.css
================
:root {
    --main-bg-color: #bbb9b9;;
    --main-text-color: rgb(55, 53, 47);
    --main-bg-color-rgba: rgba(253, 253, 253, .8);
}

* {
    font-family: 'gill sans', sans-serif;
    line-height: 1.25em;
    margin: 0;
    padding: 0;
}

main,
article,
section,
h1, h2, h3, h4, h5, h6,
nav {
   padding: 1%; 
   padding-left: 0;
   padding-right: 0;
}

h1, h2, h3, h4, h5, h6 {
    padding-bottom: 0;
    margin-bottom: 0;
    line-height: 1.2em;
}

h3 {
	font-size: 1.25rem;
}

html {
    background-color: var(--main-bg-color);
    color: var(--main-text-color);
}

header {
    font-size: 15pt;
    margin-top: 3%;
    margin-bottom: 3%;
}

body {
    margin: auto;
    max-width: 600px;
    text-align: center;
    margin-top: 17%;
}

a {
    color: var(--main-text-color);
}

form input {
    margin: 8px 0px;
    width: 35%;
    padding: 12px 20px;
    box-sizing: border-box;
    border: 2px solid #555;
    border-radius: 4px;
    font-size: 16px;
    background-color: white;
    background-position: 10px 10px;
    background-size: 22px;
    background-repeat: no-repeat;
    padding: 12px 20px 12px 40px;
}

button {
    width: 40%;
    background-color: #999999;
    padding: 10px;
    margin: 6px;
    border: 2px solid #555;
    border-radius: 4px;
    cursor: pointer;
    font-size: 18px;
    color: var(--main-text-color);
}

button:hover {
    background-color: #42b548;
    color: white;
    transition: 0.3s;
}

.user {
    background-image: url('../img/user.png');
}

.pass {
    background-image: url('../img/lock.png');
}

.panel {
    padding: 0.01em;
    margin: 1em 6em;
}

.pale-red {
    color: #000!important;
    background-color: #ffdddd!important
}

.leftbar {
    border-left: 4px solid #ccc!important
}

.border-red {
    border-color: #f44336!important
}

.options-container {
    text-align: center;
}

.p-option {
    list-style-type: none;
    margin-top: 40px;
    padding: 0;
    display: inline-block;
}

.p-option li {
    float: left;
    margin: 0px 6px;
    width: 100px;
    height: 40px;
    position: relative;
}

.p-option label,
.p-optioninput {
    display: block;
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
}

.p-option input[type="radio"] {
    opacity: 0.01;
    z-index: 100;
}

.p-option input[type="radio"]:checked+label,
.Checked+label {
    background: #42b548;
    color: white;
}

.p-option label {
    padding: 5px;
    background-color: #999999;
    border: 2px solid #555;
    cursor: pointer;
    z-index: 90;
    border-radius: 4px;
    transition: 0.3s;
}

.p-option label:hover {
    background: #42b548;
    color: white;
    transition: 0.3s;
}

================
File: js/dropdown.js
================
function displayList() {
    document.getElementById("dropdown").classList.toggle("show");
}

function updateField() {
  var number = document.getElementById('total').value;
  var result = number / 3;
  result = Math.round(result * 100) / 100;
  document.getElementById('cost').value = result;
}   

// Close the dropdown if the user clicks outside of it
window.onclick = function(event) {
  if (!event.target.matches('.dropbtn')) {

    var dropdowns = document.getElementsByClassName("dropdown-content");
    var i;
    for (i = 0; i < dropdowns.length; i++) {
      var openDropdown = dropdowns[i];
      if (openDropdown.classList.contains('show')) {
        openDropdown.classList.remove('show');
      }
    }
  }
}

================
File: php/connect-DB.php
================
<!-- Connecting -->
<?php
require 'vendor/autoload.php';

$dotenv = Dotenv\Dotenv::createImmutable(__DIR__ . '/../');
$dotenv->load();

$databaseName = $_ENV['DBNAME'];
$dsn = 'mysql:host=webdb.uvm.edu;dbname=' . $databaseName;
$username = $_ENV['DBUSER'];
$password = $_ENV['DBPASS'];

$pdo = new PDO($dsn, $username, $password);
if ($pdo) print '<!-- Connection complete -->';
?>

================
File: php/send_reminder.php
================
<?php
include 'connect-DB.php';

if (isset($_POST['sendReminder'])) {
    $id = htmlspecialchars($_POST['pmk']);
    $sql = 'SELECT fldDue, fldOwe FROM tblUtilities WHERE pmkBillID = ?';
    $statement = $pdo->prepare($sql);
    $data = array($id);
    $statement->execute($data);

    $result = $statement->fetch(PDO::FETCH_ASSOC);

    $owedArray = explode(',', $result['fldOwe']);

    $owed = array_map(function($value) {
        return '"' . trim($value) . '"';
    }, $owedArray);

    $owedString = implode(',', $owed);
    
    $command = escapeshellcmd('python3 ../python/send_reminder.py "' . $result['fldDue'] . '" [' . $owedString . ']');
    $output = shell_exec($command);

    header('Location: ' . $_SERVER['HTTP_REFERER']);
}
?>

================
File: php/sql.php
================
<?php
include '../top.php';
?>
<main>
    <p>Create Table SQL</p>

    <pre>
    CREATE TABLE tblUtilities(
    pmkBillID int NOT NULL AUTO_INCREMENT PRIMARY KEY,
    fldDate VARCHAR(50) DEFAULT NULL,
    fldItem VARCHAR(50) DEFAULT NULL,
    fldTotal VARCHAR(50) DEFAULT NULL,
    fldCost VARCHAR(50) DEFAULT NULL,
    fldDue VARCHAR(50) DEFAULT NULL,
    fldStatus VARCHAR(50) DEFAULT NULL,
    fldView VARCHAR(150) DEFAULT NULL
    )
    </pre>

    <h2>Insert records into the table</h2>
    <pre>
    INSERT INTO tblUtilities
    (fldDate, fldItem, fldTotal, fldCost, fldDue, fldStatus, fldView, fldOwe)
    VALUES
    ('06/26/24', 'Gas', '$9.00', '$3.00', '06/27/24', 'Paid', '0613.pdf', 'Aaron, Owen, Ben');
    </pre>
</main>
<?php include '../footer.php'?>

================
File: php/update_ics.php
================
<?php
$sql = 'SELECT fldDue, fldStatus, fldItem FROM tblUtilities';
$statement = $pdo->query($sql);

$dates = [];
$status = [];
$item = [];
$bills = [];

while ($row = $statement->fetch(PDO::FETCH_ASSOC)) {
    $dates[] = $row['fldDue'];
    $status[] = $row['fldStatus'];
    $item[] = $row['fldItem'];
}

$ics_content = "BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:-//81 Buell Utilities//EN\n";

for ($i = 0; $i < count($dates); $i++) {
    // Parse date and format as required
    $due_date = DateTime::createFromFormat('Y-m-d', substr($dates[$i], 0, 10));
    $due_date_str = $due_date->format("Ymd");
    
    // Determine event status
    $event_status = "- PAID";
    if (strtolower($status[$i]) != "paid") {
        $event_status = "";
    }
    
    // Build the ICS event entry
    $summary = "{$item[$i]} Bill Due {$event_status}";
    $dtstamp = gmdate('Ymd\THis\Z');
    
    $ics_content .= "BEGIN:VEVENT\n";
    $ics_content .= "UID:{$item[$i]}-{$dates[$i]}";
    $ics_content .= "DTSTAMP:{$dtstamp}\n";
    $ics_content .= "DTSTART;VALUE=DATE:{$due_date_str}\n";
    $ics_content .= "DTEND;VALUE=DATE:{$due_date_str}\n";
    $ics_content .= "SUMMARY:{$summary}\n";
    $ics_content .= "END:VEVENT\n";
}

$ics_content .= "END:VCALENDAR";

$file = fopen("../cal.ics", "w");
fwrite($file, $ics_content);
fclose($file);
?>

================
File: php/update_owe.php
================
<?php
include 'connect-DB.php';

if (isset($_POST['updateNames'])) {
    $id = htmlspecialchars($_POST['id2']);
    $names = htmlspecialchars($_POST['updateNames']);
    $sql = 'UPDATE tblUtilities SET fldOwe = ? WHERE pmkBillID = ?';
    $statement = $pdo->prepare($sql);
    $data = array($names, $id);
    $statement->execute($data);

    // Redirect back to the main page after updating
    header('Location: ' . $_SERVER['HTTP_REFERER']);
}
?>

================
File: php/update_status_paid.php
================
<?php
include 'connect-DB.php';

if (isset($_POST['updateStatus'])) {
    $id = htmlspecialchars($_POST['id']);
    $sql = 'UPDATE tblUtilities SET fldStatus = "Paid" WHERE pmkBillID = ?';
    $statement = $pdo->prepare($sql);
    $data = array($id);
    $statement->execute($data);

    include 'update_ics.php';

    // Redirect back to the main page after updating
    header('Location: ' . $_SERVER['HTTP_REFERER']);
}
?>

================
File: php/update_status_unpaid.php
================
<?php
include 'connect-DB.php';

if (isset($_POST['updateStatus'])) {
    $id = htmlspecialchars($_POST['id']);
    $sql = 'UPDATE tblUtilities SET fldStatus = "Unpaid" WHERE pmkBillID = ?';
    $statement = $pdo->prepare($sql);
    $data = array($id);
    $statement->execute($data);

    include "update_ics.php";

    // Redirect back to the main page after updating
    header('Location: ' . $_SERVER['HTTP_REFERER']);
}
?>

================
File: python/db.py
================
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from email.mime.text import MIMEText
import datetime
from dotenv import load_dotenv
import smtplib
import schedule
import time
import os

load_dotenv()

dates = []
people = []
date_format = "%Y-%m-%d"

def get_email_body(num, date):
    if num == 0:
        body = """
        <p style="font: 14pt serif;">Hello,</p>
        <p style="font: 14pt serif;">This is a reminder that you have
        an upcoming utility bill due on """ + date + """.</p>
        """
    else:
        body = """
        <p style="font: 14pt serif;">Hello,</p>
        <p style="font: 14pt serif;">You have a new bill ready to view.</p>
        """

    body += """
    <p style="font: 14pt serif;">
        Please login to
        <a href="https://aperkel.w3.uvm.edu/utilities">81 Buell Utilities</a>
        for more info.
    </p>
    <p style="font: 14pt serif;">
    <span style="color: green;">
    81 Buell Utilities</span><br>
    P: (478)262-8935 | E: me@aaronperkel.com</p>"""

    reminder = """"""

    body += reminder

    return body

def check_bills():
    global dates
    global people

    print('============== Checking Bills ==============')
    now = datetime.datetime.now()
    print(now.strftime("%m/%d/%Y %H:%M:%S"))

    ssl_args = {'ssl': {'ca': 'webdb-cacert.pem'}}
    db_engine = create_engine(
            'mysql://' + os.getenv('DBUSER') + ':' + os.getenv('DBPASS') + '@webdb.uvm.edu/' + os.getenv('DBNAME'),
            connect_args=ssl_args)
    Session = sessionmaker(bind=db_engine)
    db = Session()

    print('connected')

    with db_engine.connect() as conn:
        result = conn.execute(text("SELECT fldDue, fldOwe FROM tblUtilities WHERE fldStatus = 'Unpaid'"))
    db.close()

    print('got SQL result')

    for row in result.all():
        dates.append(row[0])
        people.append(row[1])
        
    print(f'Dates: {dates}')
    print(f'People: {people}')
    
    return dates, people

def send_email(date):
    global date_format
    
    sender_email = 'aaron.perkel@icloud.com'
    sender = 'me@aaronperkel.com'
    sender_password = os.getenv('EMAIL_PASS')
    recipients = ['aperkel@uvm.edu', 'oacook@uvm.edu', 'bquacken@uvm.edu']

    new_date = datetime.datetime.strptime(date, date_format)
    today = time.strftime(date_format, time.localtime())
    today = datetime.datetime.strptime(today, date_format)
    delta = new_date - today
    days_left = delta.days

    if days_left <= 3:
        subject = 'URGENT: Utility Bill Reminder'
    else:
        subject = 'Utility Bill Reminder'

    body = get_email_body(0, date)

    msg = MIMEText(body, 'html')
    msg['Subject'] = subject
    msg['From'] = '81 Buell Utilities <' + sender + '>'
    msg['To'] = ', '.join(recipients)

    with smtplib.SMTP('smtp.gmail.com', 587) as server:
        server.ehlo()
        server.starttls()
        server.ehlo()
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, recipients, msg.as_string())

    confirm(msg['To'], msg['Subject'], body)

def send_email(date, people):
    recipients = []
    global date_format

    if ('Aaron' in people):
        recipients.append('aperkel@uvm.edu')
    if ('Owen' in people):
        recipients.append('oacook@uvm.edu')
    if ('Ben' in people):
        recipients.append('bquacken@uvm.edu')

    sender_email = 'aaron.perkel@icloud.com'
    sender = 'me@aaronperkel.com'
    sender_password = os.getenv('EMAIL_PASS')
    
    new_date = datetime.datetime.strptime(date, date_format)
    today = time.strftime(date_format, time.localtime())
    today = datetime.datetime.strptime(today, date_format)
    delta = new_date - today
    days_left = delta.days

    if days_left <= 3:
        subject = 'URGENT: Utility Bill Reminder'
    else:
        subject = 'Utility Bill Reminder'

    body = get_email_body(0, date)

    msg = MIMEText(body, 'html')
    msg['Subject'] = subject
    msg['From'] = '81 Buell Utilities <' + sender + '>'
    msg['To'] = ', '.join(recipients)

    with smtplib.SMTP('smtp.mail.me.com', 587) as server:
        server.ehlo()
        server.starttls()
        server.ehlo()
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, recipients, msg.as_string())

    confirm(msg['To'], msg['Subject'], body)

def confirm(recip, sub, msg):
    sender_email = 'aaron.perkel@icloud.com'
    sender = 'me@aaronperkel.com'
    sender_password = os.getenv('EMAIL_PASS')
    subject = 'Mail Sent'

    body = '<p style="font: 12pt monospace;">An email was just sent via aperkel.w3.uvm.edu/utilities.</p>'

    body += '<hr>'
    
    body += '<p style="font: 12pt monospace;">To: ' + recip + '<br>'
    body += '<p style="font: 12pt monospace;">Subject: ' + sub + '</p>'

    body += msg

    msg = MIMEText(body, 'html')
    msg['Subject'] = subject
    msg['From'] = '81 Buell Utilities <' + sender + '>'
    msg['To'] = 'aperkel@uvm.edu'

    with smtplib.SMTP('smtp.mail.me.com', 587) as server:
        server.ehlo()
        server.starttls()
        server.ehlo()
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, msg['To'], msg.as_string())

def new_bill():

    sender_email = 'aaron.perkel@icloud.com'
    sender = 'me@aaronperkel.com'
    sender_password = os.getenv('EMAIL_PASS')
    recipients = ['aperkel@uvm.edu', 'oacook@uvm.edu', 'bquacken@uvm.edu']
    subject = 'New Bill Posted'

    body = get_email_body(1, sender_email)

    msg = MIMEText(body, 'html')
    msg['Subject'] = subject
    msg['From'] = '81 Buell Utilities <' + sender + '>'
    msg['To'] = ', '.join(recipients)

    with smtplib.SMTP('smtp.mail.me.com', 587) as server:
        server.ehlo()
        server.starttls()
        server.ehlo()
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, recipients, msg.as_string())

    confirm(msg['To'], msg['Subject'], body)

def run_schedule():
    global dates
    global people

    schedule.every().day.at("10:00").do(check_bills)

    while True:
        dates = []
        people = []
        schedule.run_pending()        

        if dates:
            print('-------------- Email Scheduling --------------')    
            print('Unpaid Bills:')
            for i, date in enumerate(dates):
                print(f'- {date}: {people[i]}')
                new_date = datetime.datetime.strptime(date, date_format)
                today = time.strftime("%Y-%m-%d", time.localtime())
                today = datetime.datetime.strptime(today, date_format)
                delta = new_date - today
                days_left = delta.days
                print(f'  - Days until bill due: {days_left}')

                if days_left <= 7:
                    print('  - Sending Email')
                    send_email(date, people[i])
                    print('  - Email Sent')
                    time.sleep(1)
                else:
                    print('  - Not Sending Email')
            print('=================== Done ===================\n')
        
if __name__ == '__main__':
    print('Press Enter to call check_bills()')
    while True:
        dates = []
        people = []
        input()
        check_bills()        

        if dates:
            print('-------------- Email Scheduling --------------')    
            print('Unpaid Bills:')
            for i, date in enumerate(dates):
                print(f'- {date}: {people[i]}')
                new_date = datetime.datetime.strptime(date, date_format)
                today = time.strftime("%Y-%m-%d", time.localtime())
                today = datetime.datetime.strptime(today, date_format)
                delta = new_date - today
                days_left = delta.days
                print(f'  - Days until bill due: {days_left}')

                if days_left <= 7:
                    print('  - Sending Email')
                    send_email(date, people[i])
                    print('  - Email Sent')
                    time.sleep(1)
                else:
                    print('  - Not Sending Email')
            print('=================== Done ===================\n')

================
File: python/new_bill.py
================
import db

db.new_bill()

================
File: python/run.py
================
import db

db.run_schedule()

================
File: python/send_reminder.py
================
import db
import sys

dates = sys.argv[1]
people = sys.argv[2]

db.send_email(dates, people)

================
File: .gitignore
================
.htaccess
.DS_Store
webdb-cacert.pem
Bills/
.env
__pycache__/
.ipynb_checkpoints/

================
File: .temp
================
<Files "index.php">
	AuthType Basic
	AuthName "81 Buell Admin Portal"
	AuthUserFile /users/a/p/aperkel/.htpasswd
	require aaronperkel
</Files>

<Files "portal.php">
	AuthType Basic
	AuthName "81 Buell Admin Portal"
	AuthUserFile /users/a/p/aperkel/.htpasswd
	require user aaronperkel
</Files>

<Files "db.py">
	AuthType Basic
	AuthName "DB PY"
	AuthUserFile /users/a/p/aperkel/.htpasswd
	require user aaronperkel
</Files>

<Files "send_reminder.py">
	AuthType Basic
	AuthName "SR PY"
	AuthUserFile /users/a/p/aperkel/.htpasswd
	require user aaronperkel
</Files>

<Files "webdb-cacert.pem">
	AuthType Basic
	AuthName "CERT"
	AuthUserFile /users/a/p/aperkel/.htpasswd
	require user aaronperkel
</Files>

ErrorDocument 404 https://aperkel.w3.uvm.edu/notfound.html

================
File: authenticate.php
================
<!-- authenticate.php -->
<?php
session_start();
include 'php/connect-DB.php';

// Password validation function
function validate_password($password) {
    if (strlen($password) < 8 || strlen($password) > 25) {
        return 'Password must be between 8 and 25 characters long.';
    }
    if (!preg_match('/[A-Z]/', $password)) {
        return 'Password must contain at least one uppercase letter.';
    }
    if (!preg_match('/[a-z]/', $password)) {
        return 'Password must contain at least one lowercase letter.';
    }
    if (!preg_match('/[0-9]/', $password)) {
        return 'Password must contain at least one number.';
    }
    if (!preg_match('/[\W_]/', $password)) {
        return 'Password must contain at least one special character.';
    }
    return '';
}

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Retrieve and sanitize input
    $username = htmlspecialchars(trim($_POST['username']));
    $password = $_POST['password'];

    // Fetch user from database
    $sql = 'SELECT * FROM users WHERE username = ?';
    $stmt = $pdo->prepare($sql);
    $stmt->execute([$username]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($user) {
        // Check if account is locked
        if ($user['is_locked']) {
            // Replace echo statements with:
            $error_message = urlencode('Your account is locked due to too many failed login attempts.');
            header("Location: login.php?error=$error_message");
            exit;
        }

        // Verify password
        $password_hash = sha1($password . $user['salt']);
        if ($password_hash === $user['password_hash']) {
            // Reset failed attempts
            $sql = 'UPDATE users SET failed_attempts = 0 WHERE username = ?';
            $stmt = $pdo->prepare($sql);
            $stmt->execute([$username]);

            // Set session variables
            $_SESSION['username'] = $username;
            $_SESSION['role'] = $user['role'];

            header('Location: index.php');
            exit;
        } else {
            // Increment failed attempts
            $failed_attempts = $user['failed_attempts'] + 1;
            $is_locked = $failed_attempts >= 3 ? 1 : 0;
            $sql = 'UPDATE users SET failed_attempts = ?, is_locked = ? WHERE username = ?';
            $stmt = $pdo->prepare($sql);
            $stmt->execute([$failed_attempts, $is_locked, $username]);

            $attempts_left = 3 - $failed_attempts;
            // Replace echo statements with:
            $error_message = urlencode('Invalid password. Please try again.');
            header("Location: login.php?error=$error_message");
            exit;
        }
    } else {
        // Replace echo statements with:
        $error_message = urlencode('Invalid username. Please try again.');
        header("Location: login.php?error=$error_message");
        exit;
    }
}
?>

================
File: cal.ics
================
BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//81 Buell Utilities//EN
BEGIN:VEVENT
UID:Gas-2024-07-08DTSTAMP:20240725T204523Z
DTSTART;VALUE=DATE:20240708
DTEND;VALUE=DATE:20240708
SUMMARY:Gas Bill Due - PAID
END:VEVENT
BEGIN:VEVENT
UID:Electric-2024-07-17DTSTAMP:20240725T204523Z
DTSTART;VALUE=DATE:20240717
DTEND;VALUE=DATE:20240717
SUMMARY:Electric Bill Due - PAID
END:VEVENT
BEGIN:VEVENT
UID:Internet-2024-07-20DTSTAMP:20240725T204523Z
DTSTART;VALUE=DATE:20240720
DTEND;VALUE=DATE:20240720
SUMMARY:Internet Bill Due - PAID
END:VEVENT
BEGIN:VEVENT
UID:Gas-2024-08-06DTSTAMP:20240725T204523Z
DTSTART;VALUE=DATE:20240806
DTEND;VALUE=DATE:20240806
SUMMARY:Gas Bill Due 
END:VEVENT
BEGIN:VEVENT
UID:Electric-2024-08-19DTSTAMP:20240725T204523Z
DTSTART;VALUE=DATE:20240819
DTEND;VALUE=DATE:20240819
SUMMARY:Electric Bill Due 
END:VEVENT
BEGIN:VEVENT
UID:Internet-2024-08-20DTSTAMP:20240725T204523Z
DTSTART;VALUE=DATE:20240820
DTEND;VALUE=DATE:20240820
SUMMARY:Internet Bill Due - PAID
END:VEVENT
END:VCALENDAR

================
File: footer.php
================
<footer>
            <p>81 Buell Utilities. Updated November 2024. Version 2.0</p>
            <p>Contact: <a href="tel:4782628935">478-262-8935</a> | <a href="mailto:me@aaronperkel.com">me@aaronperkel.com</a></p>
        </footer>
    </body>
    <script src="js/dropdown.js"></script>
</html>

================
File: header.php
================
<div class="navBox">
    <header>
        <h1>81 Buell Utilities</h1>
    </header>

================
File: index.php
================
<!-- HOME PAGE -->
<?php include 'top.php'; ?>
    <main>
        <h2>Home</h2>
        <table>
            <tr>
                <th colspan="7" class="spanTwoMobile">Utilites</th>
            </tr>
            <tr>
                <th>Date Billed</th>
                <th>Item</th>
                <th>Bill Total</th>
                <th>Cost per Person</th>
                <th>Due Date</th>
                <th>Status</th>
                <th class="spanTwoMobile">See Bill</th>
            </tr>
            <?php
            $sql = 'SELECT fldDate, fldItem, fldTotal, fldCost, fldDue, fldStatus, fldView, fldOwe FROM tblUtilities';
            $statement = $pdo->prepare($sql);
            $statement->execute();

            $cells = $statement->fetchAll();

            foreach($cells as $cell) {
                print '<tr>';
                print '<td class="hover">' . $cell['fldDate'] . '</td>';
                print '<td class="hover">' . $cell['fldItem'] . '</td>';
                print '<td class="hover">$' . $cell['fldTotal'] . '</td>';
                print '<td class="hover">$' . $cell['fldCost'] . '</td>';
                print '<td class="hover">' . $cell['fldDue'] . '</td>';
                print '<td class="hover ';

                if ($cell['fldStatus'] == "Paid") {
                    print 'paid';
                    print '">' . $cell['fldStatus'] . '</td>';
                }
                else {
                    print 'notPaid';
                    print '"><div class="tooltip">' . $cell['fldStatus'] . '<span class="tooltiptext">Unpaid: ' . $cell['fldOwe'] . '</span></div></td>';
                }
                print '<td class="spanTwoMobile hover"><a href=' . $cell['fldView'] . ' target="_blank">PDF</a>&nbsp&nbsp<a href="' . $cell['fldView'] . '" download><img src="images/dl.png" width="20" class="zoom"></a></td>';
                print '</tr>';
            }
            ?>
        </table>
        <p class="tableNote">&ast; A grey dashed line divides billing cycles.</p>
        <div class="dropdown tableNote">
            <button onclick="displayList()" class="dropbtn"><i class="fa fa-calendar-o" aria-hidden="true"></i> Add to Calendar</button>
            <div id="dropdown" class="dropdown-content tableNote">
                <a href="cal.ics"> <i class="fa fa-apple" aria-hidden="true"></i> Apple Calendar</a>
                <a href="https://calendar.google.com/calendar/embed?src=ac648aqcdoquvq16v1ab33tcckgmti35%40import.calendar.google.com&ctz=America%2FNew_York" target="_blank"> <i class="fa fa-google" aria-hidden="true"></i> Google Calendar</a>
                <a href="cal.ics" download> <i class="fa fa-ics" aria-hidden="true"></i> Download ICS</a>
            </div>
        </div>
    </main>
<?php include 'footer.php' ?>

================
File: login.php
================
<!-- login.php -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Login - 81 Buell Utilities</title>
    <link rel="stylesheet" type="text/css" href="css/login.css">
</head>

<body>
    <header>
        <h1>81 Buell Utilities</h1>
        <h2>Login</h2>
    </header>

    <main>
        <!-- Add this PHP block within the <main> tag in login.php -->
        <?php
        if (isset($_GET['error'])) {
            echo '<div class="panel pale-red leftbar border-red">';
            echo '<p>' . htmlspecialchars($_GET['error']) . '</p>';
            echo '</div>';
        }
        ?>


        <form method="post" action="authenticate.php">
            <input class="user" type="text" name="username" placeholder="Username" required><br>
            <input class="pass" type="password" name="password" placeholder="Password" required><br>
            <button type="submit">Login</button>
        </form>
    </main>

    <footer>
        <p>
            New user?
            <a href="register.php">
                Register here
            </a>
        </p>
    </footer>
</body>
</html>

================
File: logout.php
================
<!-- logout.php -->
<?php
session_start();
session_unset();
session_destroy();
header('Location: login.php');
exit;
?>

================
File: nav.php
================
<!-- nav.php -->
<nav>
    <?php
    session_start();
    if (isset($_SESSION['username'])) {
        echo '<a href="/util-test/index.php">Home</a>';

        // Check if the user's role is 'Admin'
        if ($_SESSION['role'] === 'Admin') {
            echo '<a href="portal.php">Admin Portal</a>';
        }

        echo '<a href="logout.php">Logout (' . htmlspecialchars($_SESSION['username']) . ')</a>';
    } else {
        echo '<a href="login.php">Login</a>';
        echo '<a href="register.php">Register</a>';
    }
    ?>
</nav>
</div>

================
File: portal.php
================
<?php include 'top.php';

// Optionally, check user role
if ($_SESSION['role'] !== 'Admin') {
    echo 'Access denied.';
    exit;
}

    $dataIsGood = false;

    $date = '';
    $item = '';
    $total = '';
    $cost = '';
    $due =  '';
    $status = '';

    function getData($field) {
        if (!isset($_POST[$field])) {
            $data = "";
        } else {
            $data = trim($_POST[$field]);
            $data = htmlspecialchars($data);
        }
        return $data;
    }

    $date = getData('date');
    $item = getData('item');
    $total = getData('total');
    $cost = getData('cost');
    $due =  getData('due');
    $status = getData('status');

    $total = (string) $total;
    $cost = (string) $cost;

    if ($item == "Gas") {
        $uploadDir = 'Bills/Gas/';
    } elseif ($item == "Electric") {
        $uploadDir = 'Bills/Electric/';
    } elseif ($item == "Internet") {
        $uploadDir = 'Bills/Internet/';
    }

    $filePath = $uploadDir . getData('view');

    $dataIsGood = true;
    if ($date == '') {
        $dataIsGood = false;
    }
    if ($item == '') {
        $dataIsGood = false;
    }
    if ($total == '') {
        $dataIsGood = false;
    }
    if ($cost == '') {
        $dataIsGood = false;
    }
    if ($due == '') {
        $dataIsGood = false;
    }
    if ($status == '') {
        $dataIsGood = false;
    }
    if ($filePath == null) {
        $dataIsGood = false;
    }

    print '<!-- Starting Saving -->';

    $sql = 'INSERT INTO tblUtilities (fldDate, fldItem, fldTotal, fldCost, fldDue, fldStatus, fldView, fldOwe)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)';
    $statement = $pdo->prepare($sql);
    $data = array($date, $item, $total, $cost, $due, $status, $filePath, 'Aaron, Owen, Ben');

    if ($dataIsGood) {
        $statement->execute($data);
        include "update_ics.php";
        $command = escapeshellcmd('python new_bill.py');
        $output = shell_exec($command);
    }
    ?>
    <main>
        <h2>Admin Portal</h2>
        <table>
            <tr>
                <th colspan="7" class="spanTwoMobile">Utilites</th>
            </tr>
            <tr>
                <th>Date Billed</th>
                <th>Item</th>
                <th>Bill Total</th>
                <th>Cost per Person</th>
                <th>Due Date</th>
                <th>Status</th>
                <th class="spanTwoMobile">See Bill</th>
            </tr>
            <?php
            $sql = 'SELECT pmkBillID, fldDate, fldItem, fldTotal, fldCost, fldDue, fldStatus, fldView, fldOwe FROM tblUtilities';
            $statement = $pdo->prepare($sql);
            $statement->execute();

            $cells = $statement->fetchAll();
            
            foreach($cells as $cell) {
                print '<tr>';
                print '<td class="hover">' . $cell['fldDate'] . '</td>';
                print '<td class="hover">' . $cell['fldItem'] . '</td>';
                print '<td class="hover">$' . $cell['fldTotal'] . '</td>';
                print '<td class="hover">$' . $cell['fldCost'] . '</td>';

                if ($cell['fldStatus'] == "Paid") {
                    print '<td class="hover">' . $cell['fldDue'] . '</td>';
                    print '<td class="paid">' . $cell['fldStatus'];
                    print '<form method="POST" action="update_status_unpaid.php">';
                    print '<input type="hidden" name="id" value="' . $cell['pmkBillID'] . '">';
                    print '<input type="submit" name="updateStatus" class="paidButton" value="Mark as Unpaid">';
                    print '</form></td>';
                } else {
                    print '<td class="hover">' . $cell['fldDue'];
                    print '<form method="POST" action="send_reminder.php">';
                    print '<input type="hidden" name="pmk" value="' . $cell['pmkBillID'] . '">';
                    print '<input type="submit" name="sendReminder" class="paidButton" value="Send Reminder" style="margin-top:6px">';
                    print '</form></td>';
                    print '<td class="notPaid">';

                    print '<form method="POST" action="update_owe.php">';
                    print '<input type="hidden" name="id2" value="' . $cell['pmkBillID'] . '">';
                    print '<input type="text" name="updateNames" value="'. $cell['fldOwe'] . '">';
                    print '</form>';

                    print '<form method="POST" action="update_status_paid.php">';
                    print '<input type="hidden" name="id" value="' . $cell['pmkBillID'] . '">';
                    print '<input type="submit" name="updateStatus" class="paidButton" value="Mark as Paid">';
                    print '</form></td>';
                }
                print '<td class="hover spanTwoMobile"><a href=' . $cell['fldView'] . ' target="_blank">PDF</a>&nbsp;&nbsp;<a href="' . $cell['fldView'] . '" download><img alt="download button" src="images/dl.png" width="20" class="zoom"></a></td>';
                print '</tr>';
            }
            ?>
        </table>

        <table>
        <form action="#" id="newEntry" method="POST" enctype="multipart/form-data">
                <tr>
                    <th colspan="7" class="spanTwoMobile">New Entry</th>
                </tr>
                <tr>
                    <th>Date Billed</th>
                    <th>Item</th>
                    <th>Bill Total</th>
                    <th>Cost per Person</th>
                    <th>Due Date</th>
                    <th>Status</th>
                    <th class="spanTwoMobile">See Bill</th>
                </tr>
                <tr>
                    <td><input type="date" id="date" name="date" required></td>
                    <td>
                        <select id="item" name="item" required>
                            <option value="Gas">Gas</option>
                            <option value="Electric">Electric</option>
                            <option value="Internet">Internet</option>
                        </select>
                    </td>
                    <td><input type="number" id="total" name="total" oninput="updateField()" step=".01" required></td>
                    <td><input type="number" id="cost" name="cost" step=".01" readonly></td>
                    <td><input type="date" id="due" name="due" required></td>
                    <td>
                        <div class="radio">
                            <input type="radio" id="unpaid" name="status" value="Unpaid" checked required>
                            <label for="unpaid">Unpaid</label>
                            <input type="radio" id="paid" name="status" value="Paid">
                            <label for="paid">Paid</label>
                        </div>
                    </td>
                    <td class="spanTwoMobile"><input type="text" id="view" name="view" required></td>
                </tr>
                <tr>
                    <td colspan="7" class="spanTwoMobile"><input type="submit" value="Submit"></td>
                </tr>
            </form>
        </table>
    </main>
<?php include 'footer.php' ?>

================
File: README.md
================
# Utility Manager

## Description
This is a personal project of mine that is still under development. It is a portal for my two roommates' and my utility bills. It displays a table of our bills, along with the bill date, the due date, the cost per person, the status of the bill, and has links to download or view the PDF. It is built using HTML, CSS, PHP, SQL, and Python. There is an admin portal where I can add new bills, change the status of bills, or send an email reminder that a bill is coming up. A Raspberry Pi automatically sends emails to us when there are 5 days until the due date if the bill is not paid. We also get emails when new bills are uploaded to the site.

### Website Demo
![Demo](images/utility.gif)

### Requirements
1. Python Libraries
    1. `sqlalchemy`
    2. `schedule`
    3. `python-dotenv`
2. `.htaccess`
3. `.env`

### Setup Instructions
I have the following inside of my `.htaccess` file:

```
RewriteEngine on

RewriteCond %{THE_REQUEST} /([^.]+)\.php [NC]
RewriteCond %{REQUEST_URI} !/update_status_paid\.php [NC]
RewriteCond %{REQUEST_URI} !/update_status_unpaid\.php [NC]
RewriteCond %{REQUEST_URI} !/send_reminder\.php [NC]
RewriteRule ^ /%1 [NC,L,R]

RewriteCond %{REQUEST_FILENAME}.php -f
RewriteCond %{REQUEST_URI} !/update_status_paid\.php [NC]
RewriteCond %{REQUEST_URI} !/update_status_unpaid\.php [NC]
RewriteCond %{REQUEST_URI} !/send_reminder\.php [NC]
RewriteRule ^ %{REQUEST_URI}.php [NC,L]
```

This is so that the web url does not end in `.php`. I also have the following environemnt variables in `.env`:

```
DBNAME=name
DBUSER=username
DBPASS=password
EMAIL_PASS="xxxx xxxx xxxx xxxx"
```

================
File: register.php
================
<!-- register.php -->
<?php
include 'php/connect-DB.php';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Retrieve and sanitize input
    $username = htmlspecialchars(trim($_POST['username']));
    $password = $_POST['password']; // Password policies can be enforced here

    // Generate salt and hash password
    $salt = bin2hex(random_bytes(32));
    $password_hash = sha1($password . $salt);

    // Insert into database
    $sql = 'INSERT INTO users (username, password_hash, salt) VALUES (?, ?, ?)';
    $stmt = $pdo->prepare($sql);
    try {
        $stmt->execute([$username, $password_hash, $salt]);
        header('Location: login.php');
    } catch (PDOException $e) {
        echo 'Error: ' . $e->getMessage();
    }
}
?>

<!-- login.php -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Register - 81 Buell Utilties</title>
    <link rel="stylesheet" type="text/css" href="css/login.css">
</head>

<body>
    <header>
        <h1>81 Buell Utilties</h1>
        <h2>Register</h2>
    </header>

    <main>
        <!-- Add this PHP block within the <main> tag in login.php -->
        <?php
        if (isset($_GET['error'])) {
            echo '<div class="panel pale-red leftbar border-red">';
            echo '<p>' . htmlspecialchars($_GET['error']) . '</p>';
            echo '</div>';
        }
        ?>

        <form method="post" action="register.php">
            <input class="user" type="text" name="username" placeholder="Username" required><br>
            <input class="pass" type="password" name="password" placeholder="Password" required><br>
            <button type="submit">Register</button>
        </form>
    </main>

    <footer>
        <p>
            Already have an account?
            <a href="login.php">
                Login here
            </a>
        </p>
    </footer>
</body>
</html>

================
File: top.php
================
<?php
$phpSelf = htmlspecialchars($_SERVER['PHP_SELF']);
$pathParts = pathinfo($phpSelf);
session_start();
if (!isset($_SESSION['username'])) {
    header('Location: login.php');
    exit;
}
?>
<!DOCTYPE HTML>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>81 Buell Utilites</title>
        <meta name="author" content="Aaron Perkel">
        <meta name="description" content="A dashboard to keep
        track of the monthly utilities of our apartment">

        <meta name="viewport" content="width=device-width,
        initial-scale=1.0">

        <link href="css/custom.css?version=<?php print time(); ?>" 
            rel="stylesheet" 
            type="text/css">

        <link href="css/layout-phone.css?version=<?php print time(); ?>" 
            media="(max-width: 920px)"
            rel="stylesheet" 
            type="text/css">

        <link rel="apple-touch-icon" sizes="16x16" href="images/apple-touch-icon.png">
        <link rel="icon" href="images/favicon.ico">
    </head>
    <?php
    print '<body class="' . $pathParts['filename'] . '">';
    print '<!-- #################   Body element    ################# -->';
    include 'php/connect-DB.php';
    include 'header.php';
    include 'nav.php';
    ?>
